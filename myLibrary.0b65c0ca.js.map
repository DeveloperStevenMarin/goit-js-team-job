{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAGA,MAAMC,EAAaC,SAASC,eAAe,uBACrCC,EAAWF,SAASC,eAAe,qBACnCE,EAAmBH,SAASC,eAAe,oBAC3CG,EAAUJ,SAASK,cAAc,qBACvC,IAAIC,EAAc,EACdC,EAAa,EAEjBR,EAAWS,iBAAiB,SAE5B,WAEET,EAAWU,UAAUC,IAAI,gBACzBR,EAASO,UAAUE,OAAO,gBAE1B,MAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAG1D,MAAMC,EAAgBL,EAAkBM,KAAIC,GACnCC,MACL,sCAAsCD,aAAmBtB,EAAAwB,uBACzDC,MAAKC,GAAYA,EAASC,WAS9B,SAASC,EAAYC,GACnB,IAAIC,EAAa,GACjBC,QAAQC,IAAIZ,GACTK,MAAKQ,IACJ,MAAMC,EAAsBnB,EAAkBoB,OAC9CzB,EAXc,CAAAwB,GACXA,GAAuB,GAAKE,KAAKC,KAAKH,EAAsB,IAAM,EAUxDI,CAAYJ,GACzB,MAAMK,GAAK,EAAAC,EAAAC,eAAcZ,EAAanB,GACtCH,EAAQmC,UAAYH,EAEpB,MACMI,EAA6B,IAAhBd,EAAoB,EADtB,IAC2BA,EAAc,GACpDe,EAAWR,KAAKS,IAFL,GAEShB,EAAwBI,EAAWE,QAE7D,IAAK,IAAIW,EAAIH,EAAYG,EAAIF,EAAUE,IAAK,CAC1C,MAAMC,EAAOd,EAAWa,GACE,KAAtBC,EAAKC,eACPD,EAAKC,aAAe,sBAEtB,MACMC,EAAc,GADC,oCACqBF,EAAKG,cACzCC,EAAaJ,EAAKK,OAAO/B,KAAIgC,GAASA,EAAMC,OAAMC,KAAK,OACvDC,EAAY,oHAoBpBT,EAAAU,sFAEoCR,WAAAF,EAAAW,yLAIPX,EAAEW,qGAG7BP,OAAiB,IAAKQ,KAAAZ,EAAAC,cAAAY,uIAM3B9B,GAAA0B,CACF,CAEDlD,EAAyBoC,UAASZ,CAAA,IAElC+B,OACGC,GAAAC,QAAeD,U,kEAhElBlC,EAAY,GAmFZrB,EAA8BI,iBAAG,S,SAhB3BqD,G,GACkB,OAAlBA,EAAMC,OAAAC,QAAqB,CAC3B,MAAAC,EAAqBH,EAACC,OAAAG,UACvBC,EAAAC,SAAAH,GACA,QAAAA,IAKG1D,EAAc4D,EAChBL,EAAAO,kBACA3C,EAAMnB,G,cAMVL,eAAM,sBAA8BO,iBAAe,SAAgB6D,UACnE/D,EAA+B,IAChCA,UACFmB,EAAA0C,SAAA7D,I","sources":["src/watched.js"],"sourcesContent":["import { API_KEY } from './config';\r\nimport { generatePages } from './pagination';\r\n\r\nconst watchedBtn = document.getElementById('watched-movies--btn');\r\nconst queueBtn = document.getElementById('queue-movies--btn');\r\nconst watchedContainer = document.getElementById('movies-container');\r\nconst ulPages = document.querySelector('.pagination__page');\r\nlet currentPage = 1;\r\nlet totalPages = 1;\r\n\r\nwatchedBtn.addEventListener('click', renderwatchedMovies);\r\n\r\nfunction renderwatchedMovies() {\r\n  \r\n  watchedBtn.classList.add('current--btn');\r\n  queueBtn.classList.remove('current--btn')\r\n\r\n  const watchedMoviesList = JSON.parse(localStorage.getItem('watchedList'));\r\n  let moviesHTML = '';\r\n\r\n  const fetchPromises = watchedMoviesList.map(movieID => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en`\r\n    ).then(response => response.json());\r\n  });\r\n\r\n  const total_pages = watchedMoviesLength => {\r\n    return watchedMoviesLength >= 20 ? Math.ceil(watchedMoviesLength / 20) : 1;\r\n  };\r\n\r\n  fetchMovies(1);\r\n\r\n  function fetchMovies(currentPage) {\r\n    let moviesHTML = '';\r\n    Promise.all(fetchPromises)\r\n      .then(moviesData => {\r\n        const watchedMoviesLength = watchedMoviesList.length;\r\n        totalPages = total_pages(watchedMoviesLength);\r\n        const li = generatePages(currentPage, totalPages);\r\n        ulPages.innerHTML = li;\r\n\r\n        const pageSize = 20;\r\n        const startIndex = currentPage === 1 ? 0 : (currentPage - 1) * pageSize;\r\n        const endIndex = Math.min(currentPage * pageSize, moviesData.length);\r\n\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n          const data = moviesData[i];\r\n          if (data.release_date === '') {\r\n            data.release_date = 'Sin aÃ±o registrado';\r\n          }\r\n          const baseImageUrl = 'https://image.tmdb.org/t/p/';\r\n          const moviePoster = `${baseImageUrl}w500${data.poster_path}`;\r\n          const genreNames = data.genres.map(genre => genre.name).join(' | ');\r\n          const movieHTML = `\r\n            <div class=\"photo-card\">\r\n              <div class=\"info\">\r\n                <a onclick=\"openModal('${data.id}')\" class=\"info__poster\">\r\n                  <img class=\"info__poster--img\" src=\"${moviePoster}\" alt=\"${data.title\r\n            }\" loading=\"lazy\" width=\"100px\" height=\"100px\" id=\"info__poster--img\" />\r\n                </a>\r\n                <h3 class=\"info__title\">\r\n                  <strong class=\"title\">${data.title}</strong>\r\n                </h3>\r\n                <p class=\"info__genre\">\r\n                  ${genreNames} | ${new Date(data.release_date).getFullYear()}\r\n                </p>\r\n                <p class=\"info-item\"></p>\r\n              </div>\r\n            </div>\r\n          `;\r\n          moviesHTML += movieHTML;\r\n        }\r\n\r\n        watchedContainer.innerHTML = moviesHTML;\r\n      })\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  function handlePageClick(event) {\r\n    if (event.target.tagName === 'LI') {\r\n      const clickedValue = event.target.innerText;\r\n      const clickedValueInt = parseInt(clickedValue);\r\n      if (clickedValue === '...') {\r\n      } else {\r\n        currentPage = clickedValueInt;\r\n        event.stopPropagation();\r\n        fetchMovies(currentPage);\r\n      }\r\n    }\r\n  }\r\n\r\n  ulPages.addEventListener('click', handlePageClick);\r\n\r\n  document\r\n    .getElementById('library__prev-page')\r\n    .addEventListener('click', async () => {\r\n      if (currentPage > 1) {\r\n        currentPage--;\r\n        await fetchMovies(parseInt(currentPage));\r\n        updateCurrentPageText(currentPage);\r\n      }\r\n    });\r\n\r\n  document\r\n    .getElementById('library__next-page')\r\n    .addEventListener('click', async () => {\r\n      if (currentPage < totalPages) {\r\n        currentPage++;\r\n        await fetchMovies(parseInt(currentPage));\r\n        updateCurrentPageText(parseInt(currentPage));\r\n      }\r\n    });\r\n\r\n  function updateCurrentPageText() {\r\n    const currentPageElement = document.getElementById('current-page');\r\n    currentPageElement.innerText = currentPage;\r\n  }\r\n}\r\n"],"names":["$4ukh0","parcelRequire","$eba37ac3deda7c3c$var$watchedBtn","document","getElementById","$eba37ac3deda7c3c$var$queueBtn","$eba37ac3deda7c3c$var$watchedContainer","$eba37ac3deda7c3c$var$ulPages","querySelector","$eba37ac3deda7c3c$var$currentPage","$eba37ac3deda7c3c$var$totalPages","addEventListener","classList","add","remove","watchedMoviesList","JSON","parse","localStorage","getItem","fetchPromises","map","movieID","fetch","API_KEY","then","response","json","fetchMovies","currentPage1","moviesHTML","Promise","all","moviesData","watchedMoviesLength","length","Math","ceil","total_pages","li","$edlQ8","generatePages","innerHTML","startIndex","endIndex","min","i","data","release_date","moviePoster","poster_path","genreNames","genres","genre","name","join","movieHTML","id","title","Date","getFullYear","catch","error","console","event","target","tagName","clickedValue","innerText","clickedValueInt","parseInt","stopPropagation","async"],"version":3,"file":"myLibrary.0b65c0ca.js.map"}